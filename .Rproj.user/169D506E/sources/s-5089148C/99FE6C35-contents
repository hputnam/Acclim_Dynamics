---
title: "ITS2_analysis"
author: "EL Strand"
date: "4/3/2020"
output: html_document
---

Analysis for the ITS2 dataset associated with Strand et al. Acclimatization Dynamics: https://github.com/hputnam/Acclim_Dynamics.  

Contents:
1. Phyloseq Analysis 
2. Relative abundance using ggplot2
3. Alpha Diversity Using otuSummary
4. PERMANOVA calculation, PCoA, NMDS
5. Alternative options to the analyses above


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
## select Knit > Knit Directory > Project Directory
```

################ PHYLOSEQ ANALYSIS ################  
Based on the tutorial from https://vaulot.github.io/tutorials/Phyloseq_tutorial.html. 
An example dataset can be found here: https://github.com/vaulot/R_tutorials/archive/master.zip 

### Phyloseq setup and reading in data files. 
Prerequisites to be installed. 
```{r}
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr') # To manipulate dataframes
if ("readxl" %in% rownames(installed.packages()) == 'FALSE') install.packages('readxl') # To read Excel files into R
if ("ggplot2" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggplot2') # for high quality graphics

source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")        
```

Load required libraries.
```{r}
rm(list=ls()) # clear work space
setwd("~/MyProjects/Acclim_Dynamics") # set working directory
getwd() # to check working directory

library("phyloseq")
library("ggplot2")      # graphics
library("readxl")       # necessary to import the data from Excel file
library("dplyr")        # filter and reformat data frames
```

Read in data tables. 
OTU_seq_abs is absolute abundance for sequences: "3_first_analysis_2020-04-01_12-26-53.145538.seqs.absolute.abund_only.txt";
OTU_type_abs is absolute abundance for type profiles: "3_first_analysis_2020-04-01_12-26-53.145538.profiles.absolute.abund_only.txt"
otu_type_rel is relative abundance for type profiles: "3_first_analysis_2020-04-01_12-26-53.145538.profiles.relative.abund_only.txt"
TAX was created from the list of SymPortal type outputs and clade information online.  
Samples_df was created with the different variables from the project, including treatment, tank, species, timepoint.

```{r}
## relative and absolute abundance datasheets
otu_seq_abs <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Seq_Absolute_raw_input.csv", sep=",", header=TRUE) # abundance based on seqs 
otu_type_abs <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Absolute_raw_input.csv", sep=",", header=TRUE) # absolute abundance based on type 
otu_type_rel <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Relative_raw_input.csv", sep=",", header=TRUE) # relative abundance based on type 

## taxonomy and sample info datasheets
tax_seq <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Taxonomy_Seq.csv", sep=",", header=TRUE)
tax_type <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Taxonomy_Type.csv", sep=",", header=TRUE)
samples_df <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Sample_variables.csv", sep=",", header=TRUE)
samples_df <- na.omit(samples_df)

#reading timepoint as factor
samples_df$Timepoint <- as.factor(samples_df$Timepoint)

# Flipping columns and rows in the OTU matrix so that columns are sample IDs and rows are the OTU outputs
# Using transpose function: https://www.r-statistics.com/tag/transpose/. 
otu_mat_seq <- t(otu_seq_abs)
otu_mat_abs_type <- t(otu_type_abs)
otu_mat_rel_type <- t(otu_type_rel)

# deleting top row generated by transpose function
# otu_mat = otu_mat[-1,] # but that gets rid of the transpose function to flip the rows and columns... hm..

# Exporting new dataframe to get a list of the type profiles
write.csv(otu_mat_seq, "~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Seq_Absolute_transposed.csv")
write.csv(otu_mat_abs_type, "~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Absolute_transposed.csv")
write.csv(otu_mat_rel_type, "~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Relative_transposed.csv")
```
Manually delete first row (V1, V2, ..) of transposed.csv files - this is annoying, come back to this later. 

```{r}
otu_seq_transposed <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Seq_Absolute_transposed.csv", sep = ",", header = TRUE)
otu_type_abs_transposed <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Absolute_transposed.csv", sep = ",", header = TRUE)
otu_type_rel_transposed <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Relative_transposed.csv", sep = ",", header = TRUE)

# take out the "X" in front of column names 
for (col in 1:ncol(otu_seq_transposed)) {
  colnames(otu_seq_transposed)[col] <- sub("X", "", colnames(otu_seq_transposed)[col])
}
for (col in 1:ncol(otu_type_abs_transposed)) {
  colnames(otu_type_abs_transposed)[col] <- sub("X", "", colnames(otu_type_abs_transposed)[col])
}
for (col in 1:ncol(otu_type_rel_transposed)) {
  colnames(otu_type_rel_transposed)[col] <- sub("X", "", colnames(otu_type_rel_transposed)[col])
}

## come back to tying to take out the "X" in the row names of otu_type_transposed. Until then, the Type profile names in the taxonomy file need to match these transposed files.
```

Transforming the dataframes. 
```{r}
row.names(otu_seq_transposed) <- otu_seq_transposed$sample_uid # defining row names from the uid column
otu_seq_transposed <- otu_seq_transposed %>% select (-sample_uid) # removing the sample uid column since it is now used as a row name 

row.names(otu_type_abs_transposed) <- otu_type_abs_transposed$sample_uid # defining row names from the uid column
otu_type_abs_transposed <- otu_type_abs_transposed %>% select (-sample_uid) # removing the sample uid column since it is now used as a row name

row.names(otu_type_rel_transposed) <- otu_type_rel_transposed$sample_uid # defining row names from the uid column
otu_type_rel_transposed <- otu_type_rel_transposed %>% select (-sample_uid) # removing the sample uid column since it is now used as a row name

row.names(tax_seq) <- tax_seq$Type_Profile 
tax_seq <- tax_seq %>% select (-Type_Profile)
row.names(tax_type) <- tax_type$Type_Profile 
tax_type <- tax_type %>% select (-Type_Profile)

row.names(samples_df) <- samples_df$sample_uid
samples_df <- samples_df %>% select (-sample_uid)

# Transforming the OTU and tax datatables into matrixes 
otu_seq_transposed <- as.matrix(otu_seq_transposed)
otu_type_abs_transposed <- as.matrix(otu_type_abs_transposed)
otu_type_rel_transposed <- as.matrix(otu_type_rel_transposed)
tax_seq <- as.matrix(tax_seq)
tax_type <- as.matrix(tax_type)

# Transforming into phyloseq objects
OTU_Seq = otu_table(otu_seq_transposed, taxa_are_rows = TRUE)
OTU_Abs_Type = otu_table(otu_type_abs_transposed, taxa_are_rows = TRUE)
OTU_Rel_Type = otu_table(otu_type_rel_transposed, taxa_are_rows = TRUE)
TAX_Seq = tax_table(tax_seq)
TAX_Type = tax_table(tax_type)
samples = sample_data(samples_df)

# Double checking that the sample components match
sample_names(TAX_Seq)
sample_names(TAX_Type)
sample_names(OTU_Rel_Type)
sample_names(OTU_Abs_Type)
sample_names(OTU_Seq)
sample_names(samples)
```

Transforming into phyloseq objects. 
```{r}
carbom_Seq <- phyloseq(OTU_Seq, TAX_Seq, samples)
carbom_Abs_Type <- phyloseq(OTU_Abs_Type, TAX_Type, samples)
carbom_Rel_Type <- phyloseq(OTU_Rel_Type, TAX_Type, samples)
```

Output:
phyloseq-class experiment-level object
otu_table()   OTU Table:         [ 228 taxa and 253 samples ]
sample_data() Sample Data:       [ 253 samples by 7 sample variables ]
tax_table()   Taxonomy Table:    [ 228 taxa by 6 taxonomic ranks ]

Double checking output from carbom objects. 
```{r}
sample_names(carbom_Seq)
sample_names(carbom_Abs_Type)
sample_names(carbom_Rel_Type)
# output should be sample names (61-315)

rank_names(carbom_Seq)
rank_names(carbom_Abs_Type)
rank_names(carbom_Rel_Type)
# output should be Domain - Type categories 

sample_variables(carbom_Seq)
sample_variables(carbom_Abs_Type)
sample_variables(carbom_Rel_Type)
# output should be the experimental categories 
```

Normalize number of reads in each sample using median sequencing depth 
**Fill in explanation of what this is later**

```{r}
## Seq
total_seq = median(sample_sums(carbom_Seq))
standf_seq = function(x, t=total_seq) round(t * (x/sum(x)))
carbom_Seq = transform_sample_counts(carbom_Seq, standf_seq)

## Abs Type
total_type = median(sample_sums(carbom_Abs_Type))
standf_type = function(x, t=total_type) round(t * (x/sum(x)))
carbom_Abs_Type = transform_sample_counts(carbom_Abs_Type, standf_type)
```

### Absolute Abundance Bar Graphs
We are the most interested in Type Profile relative abundance. See Hume et al 2019 or [link coming soon] for an explanation of Type Profiles versus Post-med sequences. Short answer: Type Profiles indicate the species indentification of the symbiont, where the post-med sequences refer to the intragenomic variation / "Defining intragenomic variants (DIVs)". 

```{r}
# filtering by the most abundance Profile Types
carbom_abund_seq <- filter_taxa(carbom_Seq, function(x) sum(x > total_seq*0.10) > 0, TRUE)

## Seq Absolute Abundance
pdf("~/MyProjects/Acclim_Dynamics/ITS2/Output/Seq_Abs_treatments.pdf")
plot_bar(carbom_abund_seq, x="Timepoint", fill="Type", facet_grid = Host_species~Treatment) + 
  geom_bar(aes(color=Type, fill=Type), stat="identity", position="fill")
dev.off()

## Type Absolute Abundance
jpeg("~/MyProjects/Acclim_Dynamics/ITS2/Output/Type_Abs_treatment.jpeg")
plot_bar(carbom_Abs_Type, x="Timepoint", fill="Type", facet_grid = Host_species~Treatment) + 
  geom_bar(aes(color=Type, fill=Type), stat="identity", position="fill")
dev.off()

## Type Relative Abundance
pdf("~/MyProjects/Acclim_Dynamics/ITS2/Output/Type_Rel_treatment.pdf")
plot_bar(carbom_Rel_Type, x="Timepoint", fill="Type", facet_grid = Host_species~Treatment) + 
  geom_bar(aes(color=Type, fill=Type), stat="identity", position="fill")
dev.off()
## didn't plot relative abundance as a percentage; see next section for relative abundance plots using ggplot2 instead of phyloseq
```

## Phyloseq setup and reading in data files troubleshooting:
Error: Error in validObject(.Object) : invalid class “phyloseq” object: Component sample names do not match. Try sample_names()
Solution: The sample values likely do not between datasheets "samples" and "OTU". The columns should be the sample IDs and the rows should be the OTU outputs (Symbiont type). 

################ RELATIVE ABUNDANCE USING GGPLOT2 ################ 
The following does not use PhyloSeq objects to plot relative abundance. 

```{r}
# Below is a small example dataset to see how the dataframe should be formatted 
relative_example_specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
relative_example_condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
relative_example_value <- abs(rnorm(12 , 0 , 15))
relative_example_data <- data.frame(relative_example_specie,relative_example_condition,relative_example_value)

library(dplyr)
library(tidyr)
library(gridExtra)
# using otu_type_rel as beginning dataframe
relative_abundance_raw <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Relative_raw_input.csv", sep=",", header=TRUE) # relative abundance based on type 
type_relative <- gather(relative_abundance_raw, "Type", "value", 2:13)
names(type_relative)[2] <- "Type_Profile"

taxonomy <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Taxonomy_Type.csv", sep=",", header=TRUE)
tax_sampl <- full_join(type_relative, taxonomy, by="Type_Profile") # joining taxonomy and sample info datasheets by Type Profile

samp_info <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Sample_variables.csv", sep=",", header=TRUE)
samp_info <- na.omit(samp_info)

relative_abundance_info <- full_join(tax_sampl, samp_info, by="sample_uid" ) # joining the above datasheet with the relative abundance data
relative_abundance_info <- na.omit(relative_abundance_info) # taking out the NAs at the bottom of the dataset from control mixes
relative_abundance_info$Timepoint <- as.factor(relative_abundance_info$Timepoint) # reading timepoint as a factor

M.cap.rel <- subset(relative_abundance_info, Host_species=="Montipora capitata") # subsetting the dataset to just Montipora values
P.acuta.rel <- subset(relative_abundance_info, Host_species=="Pocillopora acuta") # subsetting the dataset to just Pocillopora values

Poc.rel <- ggplot(P.acuta.rel, aes(fill=Type, y=value, x=Timepoint)) + geom_bar(position="fill", stat="identity") + 
  facet_wrap(~Treatment) + ylab("Relative Abundance") + ggtitle("Pocillopora acuta")
Poc.rel

Mcap.rel <- ggplot(M.cap.rel, aes(fill=Type, y=value, x=Timepoint)) + geom_bar(position="fill", stat="identity") + 
  facet_wrap(~Treatment) + ylab("Relative Abundance") + ggtitle("Montipora capitata")
Mcap.rel

Relative.Figs <- arrangeGrob(Mcap.rel, Poc.rel, ncol=1)
ggsave(file="~/MyProjects/Acclim_Dynamics/ITS2/Output/Relative.Figs.pdf", Relative.Figs, width = 11, height = 9, units = c("in"))
```

################ PERMANOVA CALCULATION, PCOA, NMDS ################ 
Referencing: https://rpubs.com/collnell/manova

```{r}
rm(list=ls()) # clear work space
if ("vegan" %in% rownames(installed.packages()) == 'FALSE') install.packages('vegan')
library(vegan) ##Community ecology: ordination, disversity & dissimilarities
# Analyses ran on vegan 2.5-6
```

1. Reading in and combining dataframes. 
```{r}
absolute_type_raw <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Type_Absolute_raw_input.csv", sep=",", header=TRUE) # reading in the type absolute abundance file
sample_info_p <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2/R_Input/Sample_variables.csv", sep=",", header=TRUE) # reading in sample info datasheet
sample_info_p <- na.omit(sample_info_p)

absolute_permanova <- full_join(absolute_type_raw, sample_info_p, by="sample_uid")
absolute_permanova <- select(absolute_permanova, -Plug_ID, -Tank, -Sample_Date, -sample) # removing columns that won't be factors
absolute_permanova <- na.omit(absolute_permanova)

mcap_permanova_data <- subset(absolute_permanova, Host_species=="Montipora capitata")
pacuta_permanova_data <- subset(absolute_permanova, Host_species=="Pocillopora acuta")
```

2. Transform or standardize data: Use square root or proportions to minimize influence of most abundant groups. 
```{r}
# Absolute 
abs.matrix <- as.matrix(absolute_permanova[,2:13]) # response varibles (Type Profiles) in a sample x species matrix
abs.sqrt.mat <- sqrt(abs.matrix) # square root transformation

# M capitata
mcap.matrix <- as.matrix(mcap_permanova_data[,2:13]) # response varibles (Type Profiles) in a sample x species matrix
mcap.sqrt.mat <- sqrt(mcap.matrix) # square root transformation

# P acuta
pacuta.matrix <- as.matrix(pacuta_permanova_data[,2:13]) # response varibles (Type Profiles) in a sample x species matrix
pacuta.sqrt.mat <- sqrt(pacuta.matrix) # square root transformation
```

3. Calculate ecological resemblance using bray-curtis dissimilarity (abundance weighted )
```{r}
absolute.dist <- vegdist(abs.sqrt.mat, method = 'bray')
mcap.dist <- vegdist(mcap.sqrt.mat, method = 'bray')
pacuta.dist <- vegdist(pacuta.sqrt.mat, method = 'bray')
```

4. PERMANOVA calculation
```{r}
# Absolute 
abs.permanova <- adonis2(absolute.dist~Treatment*Timepoint, data=absolute_permanova, permutations = 999, method = "bray", strata = "PLOT")
abs.permanova

# M capitata
mcap.permanova <- adonis2(mcap.dist~Treatment*Timepoint, data=mcap_permanova_data, permutations = 999, method = "bray", strata = "PLOT")
mcap.permanova

# P acuta
pacuta.permanova <- adonis2(pacuta.dist~Treatment*Timepoint, data=pacuta_permanova_data, permutations = 999, method = "bray", strata = "PLOT")
pacuta.permanova
```

5. Multi-variate dispersion calculation: PCoA
```{r}
# Species PCoA
species.dispersion<-betadisper(absolute.dist, group=absolute_permanova$Host_species)
permutest(species.dispersion)
Species.PCoA <- plot(species.dispersion, hull=FALSE, ellipse=TRUE)
pdf(Species.PCoA, "~/MyProjects/Acclim_Dynamics/ITS2/Output/Species_PCoA.pdf")
dev.off()

##Mcap
# Treatment PCoA
m.cap.treatment.dispersion<-betadisper(mcap.dist, group=mcap_permanova_data$Treatment)
permutest(m.cap.treatment.dispersion)
mcap.treatment.PCoA <- plot(m.cap.treatment.dispersion, hull=FALSE, ellipse=TRUE)

# Timepoint PCoA
m.cap.timepoint.dispersion<-betadisper(mcap.dist, group=mcap_permanova_data$Timepoint)
permutest(m.cap.timepoint.dispersion)
mcap.timepoint.PCoA <- plot(m.cap.timepoint.dispersion, hull=FALSE, ellipse=TRUE)

##Pacuta
# Treatment PCoA
pacuta.treatment.dispersion<-betadisper(absolute.dist, group=absolute_permanova$Treatment)
permutest(pacuta.treatment.dispersion)
pacuta.treatment.PCoA <- plot(pacuta.treatment.dispersion, hull=FALSE, ellipse=TRUE)

# Timepoint PCoA
pacuta.timepoint.dispersion<-betadisper(absolute.dist, group=absolute_permanova$Timepoint)
permutest(pacuta.timepoint.dispersion)
pacuta.timepoint.PCoA <- plot(pacuta.timepoint.dispersion, hull=FALSE, ellipse=TRUE)
```

6. NMDS Analysis 
```{r}
coralNMDS <- metaMDS(absolute.sqrt.mat, distance = "bray", k=2, trymax=35, autotransform = TRUE)
coralNMDS

stressplot(coralNMDS)

NMDS1 <- coralNMDS$points[,1]
NMDS2 <- coralNMDS$points[,2]
coral.plot <- cbind(relative_permanova, NMDS1, NMDS2)

ggplot(coral.plot, aes(NMDS1, NMDS2, color=Host_species)) + geom_point(position=position_jitter(0.1), shape=3) +
  stat_ellipse(type='t', size=1) +
  theme_minimal() + xlim(-5,2.5)
  # geom_text(data = coral.plot, aes(NMDS1, NMDS2, label=Treatment), position=position_jitter(0.35))

fit<-envfit(coralNMDS, absolute.sqrt.mat)
arrow<-data.frame(fit$vectors$arrows,R = fit$vectors$r, P = fit$vectors$pvals)
arrow$FG <- rownames(arrow)
arrow.p<-filter(arrow, P <= 0.05)

ggplot(data=coral.plot, aes(NMDS1, NMDS2))+
  geom_point(data=coral.plot, aes(NMDS1, NMDS2, color=Host_species),position=position_jitter(.1))+##separates overlapping points
  stat_ellipse(aes(fill=Host_species), alpha=.2,type='t',size =1, geom="polygon")+ ##changes shading on ellipses
  theme_minimal() + xlim(-5,2.5) +
  geom_segment(data=arrow.p, aes(x=0, y=0, xend=NMDS1, yend=NMDS2, label=FG, lty=FG), arrow=arrow(length=unit(.2, "cm")*arrow.p$R)) ##add arrows (scaled by R-squared value)
```





