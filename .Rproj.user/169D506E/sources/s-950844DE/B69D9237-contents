#Title: Photosynthesis and Respiration Rates
#Project: NSF BSF
#Author: HM Putnam 
#Edited by: HM Putnam
#Date Last Modified: 20181006
#See Readme file for details

rm(list=ls()) #clears workspace 

##Install packages
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools') 
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented') 
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix') 
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra') 
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR') 
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate') 
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron') 
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr') 
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr') 
if ("ggpubr" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggpubr') 

#Read in required libraries

##### Include Versions of libraries
install_github('colin-olito/LoLinR')
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library(stringr)
library("ggpubr")

setwd("~/MyProjects/Holobiont_Integration/RAnalysis/")

##### Extracting Rates #####
path.p<-"Data/Respirometry/" #the location of all your respirometry files 

# bring in the respiration files
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders
#basename above removes the subdirectory name from the file

#generate a 3 column dataframe with specific column names
Photo.R <- data.frame(matrix(NA, nrow=length(file.names)*2, ncol=5))
colnames(Photo.R) <- c("Fragment.ID","Intercept", "umol.L.sec","Temp.C","PR")

#add file names that include the subdirectory name
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE) #list all csv file names in the folder and subfolders

Photo.R <- data.frame(matrix(NA, nrow=length(file.names)*2, ncol=3)) #generate a 3 column dataframe with specific column names
colnames(Photo.R) <- c("Fragment.ID","Intercept", "umol.L.sec")

#Add names for photosynthesis or respiration for for loop
PR<-c('Photo','Resp')

for(i in 1:length(file.names.full)) { # for every file in list start at the first and run this following function
  Photo.Data1 <-read.table(file.path(path.p,file.names.full[i]), skip = 1, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
  Photo.Data1 <- Photo.Data1[with(Photo.Data1, order(Time)), ]
  Photo.Data1  <- Photo.Data1[,c(2,9,16)] #subset columns of interest
  n<-dim(Photo.Data1)[1] #identify length of data
  Photo.Data1 <-Photo.Data1[120:(n-3),] #start at data point ~2 minute in to avoid excess noise from start of run and remove last 3 lines containing text
  Photo.Data1$Time <- as.POSIXct(Photo.Data1$Time,format="%H:%M:%S", tz = "") #convert time from character to time
  Photo.Data1$x <- as.numeric(rownames(Photo.Data1))
  brk <- which(diff(Photo.Data1$Time) > 30) #look for breaks in time of x seconds or more
  brk <- Photo.Data1[brk,4]
  Photo <- subset(Photo.Data1, as.numeric(rownames(Photo.Data1)) < brk[1])  #subset by break in time stamp keeping everything before break
  Resp <- subset(Photo.Data1, as.numeric(rownames(Photo.Data1)) > brk[1]) #subset by break in time stamp keeping everything before break
  lt.levs <- list(Photo, Resp) #list levels of segmentation
  
  for(j in 1:length(lt.levs)){    
    Photo.Data <- as.data.frame(lt.levs[j])
    n<-dim(Photo.Data )[1] #identify length of data
    #Photo.Data <-Photo.Data [120:(n-3),] #start at data point ~2 minute in to avoid excess noise from start of run and remove last 3 lines containing text
    #n<-dim(Photo.Data )[1] #list length of trimmed data
    Photo.Data$sec <- 1:n #set seconds by one from start to finish of run
    
    #Save plot prior to and after data thinning to make sure thinning is not too extreme
    rename <- sub(".csv", "", file.names[i])
    pdf(paste0("Output/Photo_Resp_Output/",rename,"_",j,"thinning.pdf"))
    par(omi=rep(0.3, 4)) #set size of the outer margins in inches
    par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic
    plot(Value ~ sec, data=Photo.Data , xlab='Time (seconds)', ylab=substitute(' O'[2]~' (µmol/L)'), type='n', axes=FALSE) #plot data as a function of time
    usr  <-  par('usr')
    rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA)
    whiteGrid()
    box()
    points(Photo.Data$Value ~ Photo.Data $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
    axis(1)
    axis(2, las=1)
    
    #save original unthinned data
    thin <- 40
    alp <- 0.2
    Photo.Data.orig<-Photo.Data
    Photo.Data <-  thinData(Photo.Data ,by=thin)$newData1 #thin data by every 20 points for all the O2 values
    Photo.Data$sec <- as.numeric(rownames(Photo.Data)) #maintain numeric values for time
    Photo.Data$Temp<-NA
    Photo.Data$Temp <-  thinData(Photo.Data.orig,xy = c(1,3),by=thin)$newData1[,2] #thin data by every 20 points for the temp values
    
    plot(Value ~ sec, data=Photo.Data , xlab='Time (seconds)', ylab=substitute(' O'[2]~' (µmol/L)'), type='n', axes=FALSE) #plot thinned data
    usr  <-  par('usr') #plotting graphics using 'usr'
    rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) #giving specific coordinates for plot using 'usr'
    whiteGrid()
    box()
    points(Photo.Data $Value ~ Photo.Data $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
    axis(1)
    axis(2, las=1)
    dev.off()
    
    ##Olito et al. 2017: It is running a bootstrapping technique and calculating the rate based on density
    Regs  <-  rankLocReg(xall=Photo.Data $sec, yall=Photo.Data $Value, alpha=alp, 
                         method="pc", verbose=TRUE) 
    pdf(paste0("Output/Photo_Resp_Output/",rename,"_",j,"regression.pdf"))
    plot(Regs)
    dev.off()
    
    s <- seq(0,nrow(Photo.R),length(lt.levs)) #to order the file output sequence in correct order in data frame
    Photo.R[j+s[i],2:3] <- Regs$allRegs[1,c(4,5)] #inserts slope and intercept in the dataframe
    Photo.R[j+s[i],1] <- rename #stores the file name in the Date column
    Photo.R[j+s[i],1] <- paste0(rename,"_",j) #stores the file name in the Date column
    Photo.R[j+s[i],4] <- mean(Photo.Data$Temp, na.rm=T)  #stores the Temperature in the Temp.C column
    Photo.R[j+s[i],5] <- PR[j] #stores whether it is photosynthesis or respiration
  }
}

write.csv(Photo.R, '~/MyProjects/Holobiont_Integration/RAnalysis/Data/Photo.R.csv')

Photo.R <- read.csv(file="Data/Photo.R.csv", header=T) #read in volume and sample.info data
Photo.R <- Photo.R[,-1]
#Split up the photostynthesis and respiration data into two dataframes
#PHO <- Photo.R[Photo.R$V5=='Photo', ]
#RES <- Photo.R[Photo.R$V5=='Resp', ]

#Removing _1 or _2
Photo.R$Fragment.ID <- str_sub(Photo.R$Fragment.ID, 1, str_length(Photo.R$Fragment.ID)-2)

#Load Sample Info
Sample.Info <- read.csv(file="Data/Resp_DeltaTA_datasheet.csv", header=T) #read sample.info data
Sample.Info$Fragment.ID <- sub(".csv", "", Sample.Info$Fragment.ID)
Sample.Info$Blnk.Group <- paste(Sample.Info$Date, Sample.Info$Tank, Sample.Info$Light.or.Dark, sep = "_")
Sample.Info$Merge.ID <- paste(Sample.Info$Fragment.ID, Sample.Info$Light.or.Dark, sep = "_") 
  
#Merge data with sample info
#Photo.R <- Photo.R[,-1]
colnames(Photo.R) <- c("Fragment.ID", "Intercept","umol.L.sec", "Temp","Light.or.Dark" )
Photo.R$Merge.ID <- paste(Photo.R$Fragment.ID, Photo.R$Light.or.Dark, sep = "_")
Data <- merge(Photo.R,Sample.Info, by="Merge.ID" )

# A <- unique(Sample.Info$Merge.ID)
# B <- unique(Photo.R$Merge.ID)
# A %in% B

# Resp <- merge(RES,Sample.Info, by="Fragment.ID" )
# Resp$Group <- paste(Resp$Date, Resp$Tank, Resp$Light.or.Dark, sep = "_")
# Photo <- merge(PHO,Sample.Info, by="Fragment.ID")
# Photo$Group <- paste(Photo$Date, Photo$Tank, Photo$Light.or.Dark, sep = "_")

#Account for chamber volume to convert from umol L-1 s-1 to umol s-1. This standardizes across water volumes (different because of coral size) and removes per Liter
Data$umol.sec <- Data$umol.L.sec * (Data$Vol.ml/1000)
Data$Group <- paste(Data$Date, Data$Tank, Data$Light.or.Dark.x, sep = "_")


## BLANKS HAVE TO BE SPECIFIC TO RESPONSE VARIABLE (I.E., PHOTO OR RESP) AND Tank and Timepoint
#Calculate Photo blank rate
blnk <- aggregate(umol.sec ~ Date*Species*Tank*Light.or.Dark.x  , data=Data, mean)
Blanks <- subset(blnk, Species == "Blank")
Blanks$Group <- paste(Blanks$Date, Blanks$Tank, Blanks$Light.or.Dark.x, sep = "_")
boxplot(Blanks$umol.sec ~ Blanks$Tank)

Data <- merge(Data, Blanks, by="Group")

#Account for blank rate Subtract Blank by the temperature blank
Data$umol.sec.corr <- Data$umol.sec.x-Data$umol.sec.y

#normalize to surface area and h-1
Data$umol.cm2.hr <- (Data$umol.sec.corr*3600)/Data$Surface.Area

## Results
#remove blanks from dataset
Photo <- subset(Data, Light.or.Dark.x.x=="Photo")
Photo <- subset(Photo, Species.x!="Blank")
Resp <- subset(Data, Light.or.Dark.x.x=="Resp")
Resp <- subset(Resp, Species.x!="Blank")

write.csv(Photo, file="Output/Photo_Resp_Output/Photosynthesis.rates.csv")
write.csv(Resp, file="Output/Photo_Resp_Output/Respiration.rates.csv")

#merge desired columns by id
resp.data <- merge(Photo[,c(1,2,3,6,8,15,18,19,38)],Resp[,c(3,38)], by="Fragment.ID.x")

#rename the columns
names(resp.data)[names(resp.data) == "umol.cm2.hr.x"]<- "Pnet_umol.cm2.hr" 
names(resp.data)[names(resp.data) == "umol.cm2.hr.y"] <- "Rdark_umol.cm2.hr"

#calculate gross photosynthesis Pnet -- Rdark
resp.data$Pgross_umol.cm2.hr <- resp.data$Pnet_umol.cm2.hr - resp.data$Rdark_umol.cm2.hr

#Calculate means
AllMeans <- ddply(resp.data, c('Date.x','Species.x', 'Treatment'), summarize,
                  #pnet
                  Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
                  N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
                  Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                  #Rdark
                  Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
                  Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                  #Pgross
                  Pgross.mean  = mean(Pgross_umol.cm2.hr, na.rm=TRUE),
                  Pgross.se = sd (Pgross_umol.cm2.hr, na.rm=TRUE)/sqrt(N))
AllMeans
colnames(AllMeans) <- c("Date", "Species", "Treatment", "Pnet.mean", "N",   "Pnet.se",  "Rdark.mean",   "Rdark.se", "Pgross.mean",  "Pgross.se")
AllMeans$Group <- paste(AllMeans$Species, AllMeans$Treatment, sep = "_")
#write Results
write.csv(resp.data, file="Output/Photo_Resp_Output/Resp_AllRates.csv") # raw data
write.csv(AllMeans, file="Output/Photo_Resp_Output/Resp_AllMeans.csv") # Mean data


##### Plotting Rates #####

Pact  <- subset(AllMeans, Species=="Pocillopora")
Mcap <- subset(AllMeans, Species=="Montipora")

Mcap.All <- subset(resp.data, Species.x=="Montipora")
Mcap.All$Trt <- paste(Mcap.All$Species.x, Mcap.All$Treatment, sep="_")
Pact.All  <- subset(resp.data, Species.x=="Pocillopora") 
Pact.All$Date.x <- factor(Pact.All$Date.x)
Pact.All$Trt <- paste(Pact.All$Species.x, Pact.All $Treatment, sep="_")

# Taking out the missing p. acuta fragments
Pact.missing.list <- c("P-2880_20180923", "P-2752_20180923", "P-2522_20180923", "P-2523_20180923", "P-2981_20180929", "P-2984_20180929", "P-1739_20180929", "P-2859_20180929")
Pact.missing.list <- as.list(Pact.missing.list)
Pact.missing <- Pact.All[!grepl(paste(Pact.missing.list, collapse = "|"), Pact.All$Fragment.ID.x),]

# Taking out the missin m. capitata fragments 
Mcap.missing.list <- c("M-2976_20180923", "M-3003_20180923", "M-2008_20180923", "M-2512_20180923", "M-2528_20180929", "M-2740_20180929", "M-1603_20180929", "M-2200_20180929")
Mcap.missing.list <- as.list(Mcap.missing.list)
Mcap.missing <- Mcap.All[!grepl(paste(Mcap.missing.list, collapse = "|"), Mcap.All$Fragment.ID.x),]

# Changing respiration to absolute values
Pact.missing$Rdark_umol.cm2.hr <- abs(Pact.missing$Rdark_umol.cm2.hr)
Mcap.missing$Rdark_umol.cm2.hr <- abs(Mcap.missing$Rdark_umol.cm2.hr)

Mcap.Pg <- ggline(Mcap.missing, x = "Date.x", y = "Pgross_umol.cm2.hr", color = "Trt",
       ylim=c(0,4.5),
       add = c("mean_se"),
       palette = c("lightblue", "blue", "salmon", "red3"))
Mcap.Pg 

Mcap.Rd <- ggline(Mcap.missing, x = "Date.x", y = "Rdark_umol.cm2.hr", color = "Trt",
       ylim=c(0,1), add = c("mean_se"),
       palette = c("lightblue", "blue", "salmon", "red3"))
Mcap.Rd

Pact.Pg <- ggline(Pact.missing, x = "Date.x", y = "Pgross_umol.cm2.hr", color = "Trt",
       ylim=c(0,3.5), add = c("mean_se"),
       palette = c("lightblue", "blue", "salmon", "red3"))
Pact.Pg

Pact.Rd <- ggline(Pact.missing, x = "Date.x", y = "Rdark_umol.cm2.hr", color = "Trt",
       ylim=c(-0.75,0), add = c("mean_se"),
       palette = c("lightblue", "blue", "salmon", "red3"))
Pact.Rd

Poc.Figs <- arrangeGrob(Pact.Pg, Pact.Rd, ncol=1)
ggsave(file="Output/Photo_Resp_Output/Poc_Respirometry.pdf", Poc.Figs, width = 11, height = 6, units = c("in"))
ggsave(file="Output/Photo_Resp_Output/Poc_Respirometry.jpg", Poc.Figs, width = 8, height = 6, units = c("in"))

Mont.Figs <- arrangeGrob(Mcap.Pg, Mcap.Rd, ncol=1)
ggsave(file="Output/Photo_Resp_Output/Mont_Respirometry.pdf", Mont.Figs, width = 11, height = 6, units = c("in"))
ggsave(file="Output/Photo_Resp_Output/Mont_Respirometry.jpg", Mont.Figs, width = 8, height = 6, units = c("in"))

Resp.Figs <- arrangeGrob(Mcap.Pg, Pact.Pg, Mcap.Rd, Pact.Rd, ncol=2)
ggsave(file="Output/Photo_Resp_Output/Respirometry.pdf", Resp.Figs, width = 11, height = 6, units = c("in"))
ggsave(file="Output/Photo_Resp_Output/Respirometry.jpg", Resp.Figs, width = 11, height = 6, units = c("in"))

## Statsitics (time 2)
# Pnet
hist(Pact.All$Pnet_umol.cm2.hr)
library(car)
shapiro.test(Pact.All$Pnet_umol.cm2.hr) 
bartlett.test(Pnet_umol.cm2.hr~Treatment, data=Pact.All)
bartlett.test(Pnet_umol.cm2.hr~Origin, data=Pact.All)

Pnet.aov <- aov(Pnet_umol.cm2.hr ~ Treatment, data = Pact.All)
summary(Pnet.aov)
TukeyHSD(Pnet.aov)

#Pgross
hist(Pact.All$Pgross_umol.cm2.hr)
library(car)
shapiro.test(Pact.All$Pgross_umol.cm2.hr) 
bartlett.test(Pgross_umol.cm2.hr~Treatment, data=Pact.All)
bartlett.test(Pgross_umol.cm2.hr~Origin, data=Pact.All)

Pgross.aov <- aov(Pgross_umol.cm2.hr ~ Treatment, data = Pact.All)
summary(Pgross.aov)
TukeyHSD(Pgross.aov)

#Rdark

hist(Pact.All$Rdark_umol.cm2.hr)
library(car)
shapiro.test(Pact.All$Rdark_umol.cm2.hr) 
bartlett.test(Rdark_umol.cm2.hr~Treatment, data=Pact.All)
bartlett.test(Rdark_umol.cm2.hr~Origin, data=Pact.All)

Rdark.aov <- aov(Rdark_umol.cm2.hr ~ Treatment, data = Pact.All)
summary(Rdark.aov)
TukeyHSD(Rdark.aov)
