---
title: "ITS2_analysis"
author: "EL Strand"
date: "4/3/2020"
output: html_document
---

Analysis for the ITS2 dataset associated with Strand et al. Acclimatization Dynamics: https://github.com/hputnam/Acclim_Dynamics.  

Contents:
1. Phyloseq Analysis 
2. otuSummary: Alpha Diversity 

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
## select Knit > Knit Directory > Project Directory
```

#### PHYLOSEQ ANALYSIS 
Based on the tutorial from https://vaulot.github.io/tutorials/Phyloseq_tutorial.html. 
An example dataset can be found here: https://github.com/vaulot/R_tutorials/archive/master.zip 

### Phyloseq setup and reading in data files. 
Prerequisites to be installed. 
```{r}
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr') # To manipulate dataframes
if ("readxl" %in% rownames(installed.packages()) == 'FALSE') install.packages('readxl') # To read Excel files into R
if ("ggplot2" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggplot2') # for high quality graphics

source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")        
```

Load required libraries.
```{r}
rm(list=ls()) # clear work space
setwd("~/MyProjects/Acclim_Dynamics") # set working directory
getwd() # to check working directory

library("phyloseq")
library("ggplot2")      # graphics
library("readxl")       # necessary to import the data from Excel file
library("dplyr")        # filter and reformat data frames
```

Read in data tables. 
OTU original file in SymPortal output is absolute abundance txt file: "3_first_analysis_2020-04-01_12-26-53.145538.seqs.absolute.abund_only.txt";
TAX was created from the list of SymPortal type outputs and clade information online: 
Samples_df was created with the different variables from the project, including treatment, tank, species, timepoint

```{r}
otu_mat <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/Full_abundance.csv", sep=",", header=TRUE)
tax_mat <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/Taxonomy.csv", sep=",", header=TRUE)
samples_df <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/Sample_variables.csv", sep=",", header=TRUE)

#reading timepoint as factor
samples_df$Timepoint <- as.factor(samples_df$Timepoint)

# Flipping columns and rows in the OTU matrix so that columns are sample IDs and rows are the OTU outputs
# Using transpose function: https://www.r-statistics.com/tag/transpose/. 
otu_pyloseq <- t(otu_mat)

# deleting top row generated by transpose function
# otu_mat = otu_mat[-1,] # but that gets rid of the transpose function to flip the rows and columns... hm..

# Exporting new dataframe to get a list of the type profiles
write.csv(otu_pyloseq, "~/MyProjects/Acclim_Dynamics/ITS2_Data/Type_Profiles.csv")
```

Manually delete first row of V1, V2, etc. - this is annoying, come back to this later
```{r}
otu_transposed <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/Type_Profiles.csv", sep = ",", header = TRUE)
# take out the "X" in front of column names 
for (col in 1:ncol(otu_transposed)) {
  colnames(otu_transposed)[col] <- sub("X", "", colnames(otu_transposed)[col])
}
```

Transforming the dataframes. 
```{r}
row.names(otu_transposed) <- otu_transposed$sample_uid # defining row names from the uid column
otu_transposed <- otu_transposed %>% select (-sample_uid) # removing the sample uid column since it is now used as a row name 

row.names(tax_mat) <- tax_mat$Type_Profile 
tax_mat <- tax_mat %>% select (-Type_Profile)

row.names(samples_df) <- samples_df$sample_uid
samples_df <- samples_df %>% select (-sample_uid)

# Transforming the OTU and tax datatables into matrixes 
otu_transposed <- as.matrix(otu_transposed)
tax_mat <- as.matrix(tax_mat)

# Transforming into phyloseq objects
OTU = otu_table(otu_transposed, taxa_are_rows = TRUE)
TAX = tax_table(tax_mat)
samples = sample_data(samples_df)

# Double checking that the sample components match
sample_names(TAX)
sample_names(OTU)
sample_names(samples)
```

Transforming into phyloseq objects. 
```{r}
carbom <- phyloseq(OTU, TAX, samples)
carbom
```

Output:
phyloseq-class experiment-level object
otu_table()   OTU Table:         [ 228 taxa and 253 samples ]
sample_data() Sample Data:       [ 253 samples by 7 sample variables ]
tax_table()   Taxonomy Table:    [ 228 taxa by 6 taxonomic ranks ]

Double checking output from carbom objects. 
```{r}
sample_names(carbom)
# output should be sample names (61-315)

rank_names(carbom)
# output should be Domain - Genus categories 

sample_variables(carbom)
# output should be the experimental categories 
```

Normalize number of reads in each sample using median sequencing depth 
***********Wtf is this***********
```{r}
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x/sum(x)))
carbom = transform_sample_counts(carbom, standf)
```

## Phyloseq setup and reading in data files troubleshooting:
Error: Error in validObject(.Object) : invalid class “phyloseq” object: Component sample names do not match. Try sample_names()
Solution: The sample values likely do not between datasheets "samples" and "OTU". The columns should be the sample IDs and the rows should be the OTU outputs (Symbiont type). 

### Bar graphs 
```{r}
# excluding NA treatments - hard and soft mix controls 

plot_bar(carbom, x="Timepoint", fill="Genus", facet_grid = Host_species~Treatment) + 
  geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack")
```

```{r}
sample_date <- merge_samples(carbom, "Timepoint")
plot_bar(sample_date, fill="Genus") +
  geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack")
```


### Heatmaps 
```{r}
# filtering by the most abundance Profile Types
carbom_abund <- filter_taxa(sample_date, function(x) sum(x > total*0.20) > 0, TRUE)

plot_heatmap(carbom_abund, method = "NMDS", distance = "bray")
```

### Alpha diversity 
```{r}
plot_richness(carbom, measures = c("Chao1", "Shannon"), x="Timepoint", color = "Treatment")
```

#### ALPHA DIVERSITY USING OTUSUMMARY

### Calculating alpha diversity: https://rdrr.io/cran/otuSummary/man/alphaDiversity.html
The dataframe input needs to be a specific matrix format. See sections prior to "Transforming to phyloseq objects" and what goes into the output csv "otu_transposed". The output of this function is allBio (alpha diversity for the whole community), abundBio (alpha diversity indices for the adundant population), and rareBio (alpha diversity indices for the rare biosphere). 

Loading in dataframes and running alpha diversity metrics usings otuSummary package. 
```{r}
if ("otuSummary" %in% rownames(installed.packages()) == 'FALSE') install.packages('otuSummary') 
library(otuSummary)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(tidyr)
library(gridExtra)

### example data loaded to compare dataframe formatting
data(otumothur)
test1 <- alphaDiversity(otutab = otumothur, siteInCol = TRUE,
    taxhead = "taxonomy", threshold = 1, percent = FALSE, write = FALSE)
### 

alpha <- alphaDiversity(otu_transposed, siteInCol = TRUE, taxhead = NULL, threshold = 1, percent = FALSE, write = TRUE)
write.csv(alpha$allBio, "~/MyProjects/Acclim_Dynamics/ITS2_Data/alpha_allBio.csv")
write.csv(alpha$abundBio, "~/MyProjects/Acclim_Dynamics/ITS2_Data/alpha_abundBio.csv")
write.csv(alpha$rareBio, "~/MyProjects/Acclim_Dynamics/ITS2_Data/alpha_rareBio.csv")
```

Merging the diversity measures from allBio and sample information. 
```{r}
allBio <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/alpha_rareBio.csv", sep = ",", header = TRUE)
sample_info <- read.csv("~/MyProjects/Acclim_Dynamics/ITS2_Data/Sample_variables.csv", sep=",", header=TRUE)
names(allBio)[1] <- "sample_uid" # changing the column header to match that in sample_info

alpha_diversity_total <- full_join(allBio, sample_info, by="sample_uid")
```

Plotting alpha diversity values over timepoint, treatment, and species. 
```{r}
# Alpha Diversity means 
## THIS NEEDS TO BE TIMEPOINT B/C 3 TIMEPOINTS ON 20180922
alpha_diversity_total <- na.omit(alpha_diversity_total)
alpha_diversity_total$Sample_Date <- as.factor(alpha_diversity_total$Sample_Date)
alpha_diversity_total$Timepoint <- as.factor(alpha_diversity_total$Timepoint) 

# Nevermind on the below for now 
# Sample #138 has a value of 0 for shannon index - look into later; take out sample uid 77 which is sample 138
# alpha_diversity_total <- filter(alpha_diversity_total, !sample_uid==77)

Shannon.Means <- ddply(alpha_diversity_total, c('Timepoint','Host_species', 'Treatment'), summarize,
                  Shannon.mean= mean(shannon, na.rm=T), #mean shannon
                  N = sum(!is.na(shannon)), # sample size
                  Shannon.se = sd(shannon, na.rm=T)/sqrt(N)) #SE


Mcap_alpha <- subset(Shannon.Means, Host_species=="Montipora capitata")
Mcap.A <- ggline(Mcap_alpha, x = "Timepoint", y = "Shannon.mean", color = "Treatment",
       ylim=c(0.5,4), 
       add = c("Shannon.se"),
       palette = c("lightblue", "blue", "salmon", "red3")) + ggtitle("Montipora capitata") + ylab("Alpha diversity")
Mcap.A

Pacuta_alpha <- subset(Shannon.Means, Host_species=="Pocillopora acuta")
Pacuta.A <- ggline(Pacuta_alpha, x = "Timepoint", y = "Shannon.mean", color = "Treatment",
       ylim=c(0,3), 
       add = c("Shannon.se"),
       palette = c("lightblue", "blue", "salmon", "red3")) + ggtitle("Pocillopora acuta") + ylab("Alpha diversity")
Pacuta.A

Alpha.Figs <- arrangeGrob(Mcap.A, Pacuta.A, ncol=1)
ggsave(file="~/MyProjects/Acclim_Dynamics/ITS2_Data/Output/Alpha.Figs.pdf", Alpha.Figs, width = 11, height = 6, units = c("in"))
```

Statistical analyses 
```{r}
hist(Mcap_alpha$shannon)
library(car)
shapiro.test(Mcap_alpha$shannon) 
bartlett.test(shannon~Treatment, data=Mcap_alpha)
bartlett.test(shannon~Origin, data=Mcap_alpha)

Mcap_alpha.aov <- aov(Shannon.mean ~ Treatment, data = Mcap_alpha)
summary(Mcap_alpha.aov)
TukeyHSD(Mcap_alpha.aov)

Pacuta_alpha.aov <- aov(Shannon.mean ~ Treatment, data = Pacuta_alpha)
summary(Pacuta_alpha.aov)
TukeyHSD(Pacuta_alpha.aov)
```


#### SCRIPT NOT USED B/C OF ERRORS OR DECIDED ON OTHER PACKAGES
### SCRIPT BELOW COULD BE USEFUL IN THE FUTURE 

### Calculating alpha diversity: https://www.rdocumentation.org/packages/tabula/versions/1.0.0/topics/alpha-diversity
```{r}
#dataframes - otu_mat, samples_df, tax_mat
if ("tabula" %in% rownames(installed.packages()) == 'FALSE') install.packages('tabula') 
library(tabula)

diversity(otu_mat, "shannon", simplify = FALSE)
```
