"0","PR <- c('Photo', 'Resp')"
"0","for(i in 1:length(file.names.full)) { # for every file in list start at the first and run this following function"
"0","  Photo.Data1 <-read.table(file.path(path.p,file.names.full[i]), skip = 1, header=T, sep="","", na.string=""NA"", fill = TRUE, as.is=TRUE, fileEncoding=""latin1"") #reads in the data files"
"0","  Photo.Data1 <- Photo.Data1[with(Photo.Data1, order(Time)), ]"
"0","  Photo.Data1  <- Photo.Data1[,c(2,9,16)] #subset columns of interest"
"0","  n<-dim(Photo.Data1)[1] #identify length of data"
"0","  Photo.Data1 <-Photo.Data1[120:(n-3),] #start at data point ~2 minute in to avoid excess noise from start of run and remove last 3 lines containing text"
"0","  Photo.Data1$Time <- as.POSIXct(Photo.Data1$Time,format=""%H:%M:%S"", tz = """") #convert time from character to time"
"0","  Photo.Data1$x <- as.numeric(rownames(Photo.Data1))"
"0","  brk <- which(diff(Photo.Data1$Time) > 30) #look for breaks in time of x seconds or more"
"0","  brk <- Photo.Data1[brk,4]"
"0","  Photo <- subset(Photo.Data1, as.numeric(rownames(Photo.Data1)) < brk[1])  #subset by break in time stamp keeping everything before break"
"0","  Resp <- subset(Photo.Data1, as.numeric(rownames(Photo.Data1)) > brk[1]) #subset by break in time stamp keeping everything before break"
"0","  lt.levs <- list(Photo, Resp) #list levels of segmentation"
"0","  "
"0","  for(j in 1:length(lt.levs)){    "
"0","    Photo.Data <- as.data.frame(lt.levs[j])"
"0","    n<-dim(Photo.Data )[1] #identify length of data"
"0","    #Photo.Data <-Photo.Data [120:(n-3),] #start at data point ~2 minute in to avoid excess noise from start of run and remove last 3 lines containing text"
"0","    #n<-dim(Photo.Data )[1] #list length of trimmed data"
"0","    Photo.Data$sec <- 1:n #set seconds by one from start to finish of run"
"0","    "
"0","    #Save plot prior to and after data thinning to make sure thinning is not too extreme"
"0","    rename <- sub("".csv"", """", file.names[i])"
"0","    pdf(paste0(""Physiology_variables/Respirometry/Output/Data_thinning/"",rename,""_"",j,""thinning.pdf""))"
"0","    par(omi=rep(0.3, 4)) #set size of the outer margins in inches"
"0","    par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic"
"0","    plot(Value ~ sec, data=Photo.Data , xlab='Time (seconds)', ylab=substitute(' O'[2]~' (µmol/L)'), type='n', axes=FALSE) #plot data as a function of time"
"0","    usr  <-  par('usr')"
"0","    rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA)"
"0","    whiteGrid()"
"0","    box()"
"0","    points(Photo.Data$Value ~ Photo.Data $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)"
"0","    axis(1)"
"0","    axis(2, las=1)"
"0","    "
"0","    #save original unthinned data"
"0","    thin <- 40"
"0","    alp <- 0.2"
"0","    Photo.Data.orig<-Photo.Data"
"0","    Photo.Data <-  thinData(Photo.Data ,by=thin)$newData1 #thin data by every 20 points for all the O2 values"
"0","    Photo.Data$sec <- as.numeric(rownames(Photo.Data)) #maintain numeric values for time"
"0","    Photo.Data$Temp<-NA"
"0","    Photo.Data$Temp <-  thinData(Photo.Data.orig,xy = c(1,3),by=thin)$newData1[,2] #thin data by every 20 points for the temp values"
"0","    "
"0","    plot(Value ~ sec, data=Photo.Data , xlab='Time (seconds)', ylab=substitute(' O'[2]~' (µmol/L)'), type='n', axes=FALSE) #plot thinned data"
"0","    usr  <-  par('usr') #plotting graphics using 'usr'"
"0","    rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) #giving specific coordinates for plot using 'usr'"
"0","    whiteGrid()"
"0","    box()"
"0","    points(Photo.Data$Value ~ Photo.Data$sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)"
"0","    axis(1)"
"0","    axis(2, las=1)"
"0","    dev.off()"
"0","    "
"0","    ##Olito et al. 2017: It is running a bootstrapping technique and calculating the rate based on density"
"0","    Regs  <-  rankLocReg(xall=Photo.Data $sec, yall=Photo.Data $Value, alpha=alp, "
"0","                         method=""pc"", verbose=TRUE) "
"0","    pdf(paste0(""Physiology_variables/Respirometry/Output/Regressions/"",rename,""_"",j,""regression.pdf""))"
"0","    plot(Regs)"
"0","    dev.off()"
"0","    "
"0","    s <- seq(0,nrow(Photo.R),length(lt.levs)) #to order the file output sequence in correct order in data frame"
"0","    Photo.R[j+s[i],2:3] <- Regs$allRegs[1,c(4,5)] #inserts slope and intercept in the dataframe"
"0","    Photo.R[j+s[i],1] <- rename #stores the file name in the Date column"
"0","    Photo.R[j+s[i],1] <- paste0(rename,""_"",j) #stores the file name in the Date column"
"0","    Photo.R[j+s[i],4] <- mean(Photo.Data$Temp, na.rm=T)  #stores the Temperature in the Temp.C column"
"0","    Photo.R[j+s[i],5] <- PR[j] #stores whether it is photosynthesis or respiration"
"0","  }"
"0","}  "
"1","rankLocReg fitted 1326 local regressions"
"1"," "
"1","
"
